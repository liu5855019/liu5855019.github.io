{"meta":{"title":"daimu's blog","subtitle":"","description":"daimu's blog","author":"daimu","url":"https://blog.zaiyuan.cc","root":"/"},"pages":[{"title":"关于","date":"2023-04-21T09:21:03.244Z","updated":"2023-04-21T09:21:03.244Z","comments":true,"path":"about/index.html","permalink":"https://blog.zaiyuan.cc/about/index.html","excerpt":"这是摘要 dd","text":"这是摘要 dd 这是正文"},{"title":"Project","date":"2022-12-14T07:27:32.373Z","updated":"2021-10-08T02:53:16.000Z","comments":true,"path":"project/index.html","permalink":"https://blog.zaiyuan.cc/project/index.html","excerpt":"","text":""},{"title":"Series","date":"2022-12-14T07:34:12.667Z","updated":"2021-10-08T02:53:16.000Z","comments":true,"path":"series/index.html","permalink":"https://blog.zaiyuan.cc/series/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2023-04-21T08:42:06.040Z","updated":"2023-04-21T08:42:06.040Z","comments":true,"path":"tags/index.html","permalink":"https://blog.zaiyuan.cc/tags/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2023-04-21T09:02:36.901Z","updated":"2023-04-21T09:02:36.901Z","comments":true,"path":"categories/index.html","permalink":"https://blog.zaiyuan.cc/categories/index.html","excerpt":"","text":""},{"title":"朋友们","date":"2023-04-21T09:16:37.010Z","updated":"2023-04-21T09:16:37.010Z","comments":true,"path":"friends/index.html","permalink":"https://blog.zaiyuan.cc/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"docker -- 1. Dockerfile","slug":"shell/docker/docker1_dockerfile","date":"2023-04-07T03:09:18.000Z","updated":"2023-04-19T09:19:12.127Z","comments":true,"path":"2023/04/07/shell/docker/docker1_dockerfile/","link":"","permalink":"https://blog.zaiyuan.cc/2023/04/07/shell/docker/docker1_dockerfile/","excerpt":"","text":"作用 Dockerfile 是用来构建镜像的 Dockerfile 里的每一行, build 的时候都会对应一个 image 调试 思路 dockerfile 里的每一行, build 的时候都会对应一个 image 一个image可以使用 docker create 命令创建一个 container 然后使用 docker export 命令将 container 导出为压缩包 解压即可看到image对应的文件 1234567docker build . -t image1docker create --name pack1 image1docker export pack1 &gt; pack1.tar COPY 命令使用 copy: 从本地路径 copy 到 image 内部 1234567# 设置 image 工作目录为 /srcWORKDIR /src# 第一个. : 本地 Dockerfile 所在路径# 第二个. : image内 /src# 类似于linux: copy ./* /srcCOPY . . copy 只能访问到 Dockerfile 所在目录, 所以: 只能是 COPY . . 不能 COPY .. . 路径说明 12345678910111213141516# Dockerfile 初始本地路径# /root/github/dir1/Dockerfile# /root/github/dir1/***.sln# /root/github/dir1/DM.Log.Service/***.scprojWORKDIR /srcCOPY . .# 此时, image内路径为:# /src/Dockerfile# /src/***.sln# /src/DM.Log.Service/***.# 即: /root/github/dir1/ == /src/WORKDIR &quot;/src/DM.Log.Service/.&quot; copy image 内部文件 1234567FROM build AS publishWORKDIR /app# --from=publish : 设置从 publish image进行copy# /app/publish : image 内部的路径 /app/publish# . : image内部WORKDIR所在路径, /appCOPY --from=publish /app/publish . 示例12345678910111213141516171819202122#See https://aka.ms/containerfastmode to understand how Visual Studio uses this Dockerfile to build your images for faster debugging.FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS baseWORKDIR /appEXPOSE 80EXPOSE 443FROM mcr.microsoft.com/dotnet/sdk:6.0 AS buildWORKDIR /srcCOPY . .WORKDIR &quot;/src/DM.Log.Service/.&quot;RUN dotnet restore &quot;./DM.Log.Service.csproj&quot;RUN dotnet build &quot;./DM.Log.Service.csproj&quot; -c Release -o /app/buildFROM build AS publishRUN dotnet publish &quot;./DM.Log.Service.csproj&quot; -c Release -o /app/publish /p:UseAppHost=falseFROM base AS finalWORKDIR /appCOPY --from=publish /app/publish .ENTRYPOINT [&quot;dotnet&quot;, &quot;DM.Log.Service.dll&quot;]","categories":[{"name":"docker","slug":"docker","permalink":"https://blog.zaiyuan.cc/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.zaiyuan.cc/tags/docker/"},{"name":"dockerfile","slug":"dockerfile","permalink":"https://blog.zaiyuan.cc/tags/dockerfile/"}]},{"title":"Visual Studio Code tools","slug":"other/vscode_tools","date":"2023-02-22T07:55:52.000Z","updated":"2023-02-22T08:04:48.809Z","comments":true,"path":"2023/02/22/other/vscode_tools/","link":"","permalink":"https://blog.zaiyuan.cc/2023/02/22/other/vscode_tools/","excerpt":"","text":"1. Git GitLens 查看行级别的Git提交记录 2. theme GitHub Theme 3. Markdown Markdown All in One markdown 编辑神器 Markdown Preview Enhanced markdown 预览神器 4. Js &#x2F; Ts ESLint 股票基金 韭菜盒子","categories":[],"tags":[{"name":"tools","slug":"tools","permalink":"https://blog.zaiyuan.cc/tags/tools/"},{"name":"vscode","slug":"vscode","permalink":"https://blog.zaiyuan.cc/tags/vscode/"}]},{"title":"vue5 -- 配置跨域","slug":"vue/vue5_config_cors","date":"2023-02-10T10:02:37.000Z","updated":"2023-04-19T09:05:25.362Z","comments":true,"path":"2023/02/10/vue/vue5_config_cors/","link":"","permalink":"https://blog.zaiyuan.cc/2023/02/10/vue/vue5_config_cors/","excerpt":"","text":"1. 概念 同源策略： 是一种约定，web 与 获取的数据同源, 才能被当前web接受&#x2F;运行 它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。 为什么会有不同源: 在前后端分离的模式下，web 服务器 和 资源服务器会分开部署 前后端的域名是不一致的，此时就会发生跨域访问问题 跨域是什么： 浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域 即使域名相同, 端口不同 也是跨域的。 2. 跨域处理 正规情况下, 需要后端配置跨域规则, 在后端把前端的地址端口配置进去即可 请求示例 1234567891011Host: 192.168.52.21:8001Connection: keep-aliveAccept: */*Access-Control-Request-Method: GETAccess-Control-Request-Headers: x-requestidOrigin: http://192.168.52.21:8080User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36Sec-Fetch-Mode: corsReferer: http://192.168.52.21:8080/Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9 返回示例 12345678HTTP/1.1 204 No ContentDate: Fri, 10 Feb 2023 08:25:38 GMTServer: KestrelAccess-Control-Allow-Credentials: trueAccess-Control-Allow-Headers: x-requestidAccess-Control-Allow-Methods: GETAccess-Control-Allow-Origin: http://192.168.52.21:8080Vary: Origin 3. 伪跨域 但是作为vue前端开发者, 可能主导不了要访问的后端, 开发的时候还必须跨域访问, 然后就有了伪跨域 vue 伪跨域原理 123451. vue 可以配置一个代理, 这个代理是跟前端地址同源的2. 在启动调试的时候, 会同时启动这个代理服务3. 然后请求后台的时候, 把地址配置成这个代理服务, 请求这个代理服务; 4. 在代理服务中配置真正的后台地址, 代理服务再请求到真正的后台; 5. 后台返回数据后, 代理服务 返回到当前页面; vue 伪跨域实现 配置代理服务 123456789101112131415// vue.config.jsconst &#123; defineConfig &#125; = require(&#x27;@vue/cli-service&#x27;)module.exports = defineConfig(&#123; devServer: &#123; proxy: &#123; // 配置跨域, 开启一个代理服务 &#x27;/api&#x27;: &#123; // 代理服务的地址: /api target:&#x27;http://192.168.52.21:8001&#x27;, // 真正的后台地址 changOrigin: true, // 同意跨域 pathRewrite: &#123; // 重写url &#x27;/api&#x27;:&#x27;&#x27; &#125; &#125; &#125; &#125;&#125;) 配置url 1234const request = axios.create(&#123; baseURL: &#x27;/api&#x27;, //指向代理地址 timeout: 5000&#125;); 4. 重中之重 跨域是后端要配置的 前端只能是伪跨域 发布的时候 baseURL 要切换为真正的后台地址","categories":[{"name":"vue","slug":"vue","permalink":"https://blog.zaiyuan.cc/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://blog.zaiyuan.cc/tags/vue/"},{"name":"cors","slug":"cors","permalink":"https://blog.zaiyuan.cc/tags/cors/"}]},{"title":"windows tools","slug":"other/windows_tools","date":"2023-02-10T10:02:37.000Z","updated":"2023-02-22T08:07:34.153Z","comments":true,"path":"2023/02/10/other/windows_tools/","link":"","permalink":"https://blog.zaiyuan.cc/2023/02/10/other/windows_tools/","excerpt":"","text":"1. 下载工具 Motrix 一款全能的下载工具。支持下载 HTTP 、FTP 、BT 、磁力链接等资源。 官网: https://motrix.app/ qbittorrent 据说比 motrix 快 github地址: https://github.com/portapps/qbittorrent-portable 2. 截图软件 snipaste 确实好用 官网地址: https://zh.snipaste.com/ 3. utools 工具合集, 非常好用 快速启动 4. 剪贴板 copyQ 5. 硬件监控 trafficMonitor github: https://github.com/zhongyang219/TrafficMonitor 6. 快速预览 quicklook 空格键预览文件，开源 7. windows 使用时长 Tai 好看 好用 GitHub地址: https://github.com/Planshit/Tai 8. 字体美化 MacTypeTary 官方地址 https://www.mactype.net/","categories":[],"tags":[{"name":"tools","slug":"tools","permalink":"https://blog.zaiyuan.cc/tags/tools/"},{"name":"windows","slug":"windows","permalink":"https://blog.zaiyuan.cc/tags/windows/"}]},{"title":"vue4 -- add axios","slug":"vue/vue4_add_axios","date":"2023-02-10T08:12:20.000Z","updated":"2023-04-19T09:05:25.363Z","comments":true,"path":"2023/02/10/vue/vue4_add_axios/","link":"","permalink":"https://blog.zaiyuan.cc/2023/02/10/vue/vue4_add_axios/","excerpt":"","text":"1. axios axios 是用来网络请求的 2. 安装1npm install --save axios 3. 使用axios &#x2F; 封装 request.ts1234567891011121314151617181920212223242526272829303132333435363738// request.ts// 导入import axios from &quot;axios&quot;;// import * as tools from &#x27;./tools&#x27;;// 创建实例const request = axios.create(&#123; // baseURL: &#x27;/api&#x27;, baseURL: &#x27;https://localhost:6001&#x27;, timeout: 5000&#125;);// 请求拦截器request.interceptors.request.use((config) =&gt; &#123; config.headers[&quot;x-requestid&quot;] = tools.Random(99999, 9999999); return config;&#125;, (error) =&gt; &#123; return Promise.reject(error);&#125;);// 返回拦截器request.interceptors.response.use((response) =&gt; &#123; if (response.status == 200) &#123; // todo &#125; return response;&#125;, (error) =&gt; &#123; return Promise.reject(error);&#125;);// 导出接口方法export function LogDotaGetDeviceList() &#123; return request(&#123; url: &quot;/LogDota/GetDeviceList&quot;, method: &quot;GET&quot; &#125;)&#125; tools.ts (非必要)12345// tools.tsexport function Random(min: number, max: number ) &#123; return Math.floor(Math.random() * (max - min)) + min;&#125; 4.使用 request.ts123456789101112131415161718&lt;script lang=&quot;ts&quot;&gt;import &#123; defineComponent &#125; from &#x27;vue&#x27;;import * as request from &quot;@/assets/common/request&quot;;export default defineComponent(&#123; created() &#123; request.LogDotaGetDeviceList() .then(res =&gt; &#123; console.log(res); &#125;) .catch(err =&gt; &#123; console.error(err); &#125;) &#125;&#125;)&lt;/script&gt;","categories":[{"name":"vue","slug":"vue","permalink":"https://blog.zaiyuan.cc/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://blog.zaiyuan.cc/tags/vue/"},{"name":"axios","slug":"axios","permalink":"https://blog.zaiyuan.cc/tags/axios/"}]},{"title":"dotnet -- 3. linux install dotnet","slug":"dotnet/dotnet3_install_dotnet","date":"2023-02-08T07:28:42.000Z","updated":"2023-04-19T09:03:52.726Z","comments":true,"path":"2023/02/08/dotnet/dotnet3_install_dotnet/","link":"","permalink":"https://blog.zaiyuan.cc/2023/02/08/dotnet/dotnet3_install_dotnet/","excerpt":"","text":"脚本安装 下载地址: 点击下载 1bash dotnet-install.sh 官网https://learn.microsoft.com/zh-cn/dotnet/core/install/linux","categories":[{"name":"dotnet","slug":"dotnet","permalink":"https://blog.zaiyuan.cc/categories/dotnet/"}],"tags":[{"name":"dotnet","slug":"dotnet","permalink":"https://blog.zaiyuan.cc/tags/dotnet/"},{"name":"linux","slug":"linux","permalink":"https://blog.zaiyuan.cc/tags/linux/"}]},{"title":"sql -- cursor","slug":"shell/sql/sql_cursor","date":"2023-02-08T06:59:06.000Z","updated":"2023-02-08T06:59:07.728Z","comments":true,"path":"2023/02/08/shell/sql/sql_cursor/","link":"","permalink":"https://blog.zaiyuan.cc/2023/02/08/shell/sql/sql_cursor/","excerpt":"","text":"open_cursor 查看所有游标 1SELECT * FROM v$open_cursor ORDER BY LAST_SQL_ACTIVE_TIME DESC 查看游标 sql_text 执行次数 123SELECT SQL_TEXT, COUNT(SQL_TEXT) times FROM v$open_cursor GROUP BY SQL_TEXTORDER BY times DESC FIND WHICH SESSION IN USING MORE CURSORS. 1234SELECT sid,user_name, COUNT(*) &quot;Cursors per session&quot;FROM v$open_cursor where user_name not like &#x27;SYS&#x27;GROUP BY sid,user_nameORDER BY &quot;Cursors per session&quot; DESC; Find which SQL is using more cursors 12345select sid, sql_id ,sql_text, count(*) as &quot;OPEN CURSORS&quot;, USER_NAME from v$open_cursor--where sid in (&#x27;&amp;SID&#x27;) GROUP BY SID,SQL_TEXT,USER_NAME,sql_idORDER BY &quot;OPEN CURSORS&quot; DESC; 游标最大数 123456select p.value as max_open_curfrom v$sesstat a, v$statname b, v$parameter pwhere a.statistic# = b.statistic#and b.name = &#x27;opened cursors current&#x27;and p.name= &#x27;open_cursors&#x27;group by p.value;","categories":[],"tags":[{"name":"sql","slug":"sql","permalink":"https://blog.zaiyuan.cc/tags/sql/"},{"name":"cursor","slug":"cursor","permalink":"https://blog.zaiyuan.cc/tags/cursor/"}]},{"title":"linux -- linux cmd","slug":"shell/linux/linux","date":"2023-02-08T06:58:57.000Z","updated":"2023-03-27T09:33:27.600Z","comments":true,"path":"2023/02/08/shell/linux/linux/","link":"","permalink":"https://blog.zaiyuan.cc/2023/02/08/shell/linux/linux/","excerpt":"","text":"查看系统信息 uname -a 查看硬盘情况df -h du -h /root 列举 /root 下所有目录 及子目录文件/文件夹大小 du -sh /root /root 大小 du -sh * 查看当前目录下, 所有大小 查看ipifconfig -all 重启reboot","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.zaiyuan.cc/tags/linux/"}]},{"title":"vue3 -- add add sass","slug":"vue/vue3_add_sass","date":"2023-02-01T02:13:01.000Z","updated":"2023-04-19T09:05:25.363Z","comments":true,"path":"2023/02/01/vue/vue3_add_sass/","link":"","permalink":"https://blog.zaiyuan.cc/2023/02/01/vue/vue3_add_sass/","excerpt":"","text":"1. installnpm 安装 1npm i node-sass sass-loader -D 2. 此处安装可能出问题, 用下面方法可能能解决 管理员身份运行 powershell1npm install --global --producttion windows-build-tools 3. use1234567891011121314151617181920&lt;template&gt; &lt;div class=&quot;hello&quot;&gt; &lt;h1&gt;hello&lt;/h1&gt; &lt;el-button&gt;hello&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot;&gt;primary&lt;/el-button&gt; &lt;el-button type=&quot;info&quot;&gt; info &lt;/el-button&gt; &lt;el-button type=&quot;danger&quot;&gt;danger&lt;/el-button&gt; &lt;el-button type=&quot;success&quot;&gt;success&lt;/el-button&gt; &lt;/div&gt;&lt;/template&gt;&lt;style lang=&quot;scss&quot;&gt;.hello&#123; background: yellow; .el-button&#123; color: red; &#125;&#125;&lt;/style&gt; 4. reset.css 在 src&gt;assets&gt;css 下创建reset.css文件 粘贴下面内容123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/* http://meyerweb.com/eric/tools/css/reset/ v2.0 | 20110126 License: none (public domain)*/html, body, div, span, applet, object, iframe,h1, h2, h3, h4, h5, h6, p, blockquote, pre,a, abbr, acronym, address, big, cite, code,del, dfn, em, img, ins, kbd, q, s, samp,small, strike, strong, sub, sup, tt, var,b, u, i, center,dl, dt, dd, ol, ul, li,fieldset, form, label, legend,table, caption, tbody, tfoot, thead, tr, th, td,article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary,time, mark, audio, video &#123; margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline;&#125;/* HTML5 display-role reset for older browsers */article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section &#123; display: block;&#125;body &#123; line-height: 1;&#125;ol, ul &#123; list-style: none;&#125;blockquote, q &#123; quotes: none;&#125;blockquote:before, blockquote:after,q:before, q:after &#123; content: &#x27;&#x27;; content: none;&#125;table &#123; border-collapse: collapse; border-spacing: 0;&#125; 在 App.vue 文件里 &lt; style&gt; 第一行加 @import12345678910&lt;style lang=&quot;scss&quot;&gt;@import url(&#x27;./assets/css/reset.css&#x27;);#app &#123; font-family: Avenir, Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; text-align: center; color: #2c3e50; /* margin-top: 60px; */&#125;","categories":[{"name":"vue","slug":"vue","permalink":"https://blog.zaiyuan.cc/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://blog.zaiyuan.cc/tags/vue/"},{"name":"sass","slug":"sass","permalink":"https://blog.zaiyuan.cc/tags/sass/"}]},{"title":"vue2 -- add element ui / plus","slug":"vue/vue2_add_element_ui","date":"2023-01-31T09:27:23.000Z","updated":"2023-04-19T09:05:25.365Z","comments":true,"path":"2023/01/31/vue/vue2_add_element_ui/","link":"","permalink":"https://blog.zaiyuan.cc/2023/01/31/vue/vue2_add_element_ui/","excerpt":"","text":"1. installnpm 安装 1npm i element-ui -S 2. 完整引入1234567891011121314import Vue from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import ElementUI from &#x27;element-ui&#x27;import &#x27;element-ui/lib/theme-chalk/index.css&#x27;Vue.use(ElementUI)Vue.config.productionTip = falsenew Vue(&#123; render: h =&gt; h(App),&#125;).$mount(&#x27;#app&#x27;) 3. use1234567891011&lt;template&gt; &lt;div class=&quot;hello&quot;&gt; &lt;h1&gt;hello&lt;/h1&gt; &lt;el-button&gt;hello&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot;&gt;primary&lt;/el-button&gt; &lt;el-button type=&quot;info&quot;&gt; info &lt;/el-button&gt; &lt;el-button type=&quot;danger&quot;&gt;danger&lt;/el-button&gt; &lt;el-button type=&quot;success&quot;&gt;success&lt;/el-button&gt; &lt;/div&gt;&lt;/template&gt; 4. vue3 用的是 element plus 官网 https://element-plus.gitee.io/zh-CN/ 安装 1npm install element-plus --save 使用 main.ts 123456789import &#123; createApp &#125; from &#x27;vue&#x27;import ElementPlus from &#x27;element-plus&#x27;import &#x27;element-plus/dist/index.css&#x27;import App from &#x27;./App.vue&#x27;const app = createApp(App)app.use(ElementPlus)app.mount(&#x27;#app&#x27;) 使用 icon, 需要安装与引用地址: https://element-plus.gitee.io/zh-CN/component/icon.html","categories":[{"name":"vue","slug":"vue","permalink":"https://blog.zaiyuan.cc/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://blog.zaiyuan.cc/tags/vue/"},{"name":"element_ui","slug":"element-ui","permalink":"https://blog.zaiyuan.cc/tags/element-ui/"}]},{"title":"vue1 -- vue cli create project","slug":"vue/vue1_vue_cli_create_project","date":"2023-01-30T13:18:55.000Z","updated":"2023-04-19T09:04:38.600Z","comments":true,"path":"2023/01/30/vue/vue1_vue_cli_create_project/","link":"","permalink":"https://blog.zaiyuan.cc/2023/01/30/vue/vue1_vue_cli_create_project/","excerpt":"","text":"1. install123456789101112# 初始化项目依赖文件npm init -y # 安装脚手架cnpm i -D @vue/cli# 查看vuecli版本npx vue -V# 创建项目 貌似只能小写npx vue create project-one 安装 cnpm npm install -g cnpm –registry&#x3D;https://registry.npm.taobao.org 2. config vue.config.js12345678const &#123; defineConfig &#125; = require(&#x27;@vue/cli-service&#x27;)module.exports = defineConfig(&#123; transpileDependencies: true, devServer: &#123; open: true, host: &quot;localhost&quot; &#125;&#125;)","categories":[{"name":"vue","slug":"vue","permalink":"https://blog.zaiyuan.cc/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://blog.zaiyuan.cc/tags/vue/"},{"name":"vue_cli","slug":"vue-cli","permalink":"https://blog.zaiyuan.cc/tags/vue-cli/"}]},{"title":"linux -- ubuntu config root","slug":"shell/linux/ubuntu_config_root","date":"2022-12-27T03:46:48.000Z","updated":"2023-02-08T06:58:25.569Z","comments":true,"path":"2022/12/27/shell/linux/ubuntu_config_root/","link":"","permalink":"https://blog.zaiyuan.cc/2022/12/27/shell/linux/ubuntu_config_root/","excerpt":"","text":"1. 修改 sshd_config123456cd /etc/sshvim sshd_config# 找到 Authentication 下的 PermitRootLogin prohibit-password#修改为:PermitRootLogin yes 2. 重启 ssh1/etc/init.d/ssh restart 3. 重置 root 用户的密码 Ubuntu的默认root密码是随机的，即每次开机都有一个新的root密码 切换到普通用户 sudo passwd 根据提示输入当前用户的密码, 然后重置 root 的new密码 看到 password updated successfully, 就是重置好了","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"https://blog.zaiyuan.cc/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.zaiyuan.cc/tags/ubuntu/"}]},{"title":"docker -- 2. mysql install","slug":"shell/docker/docker2_mysql_install","date":"2022-12-17T03:24:25.000Z","updated":"2023-04-19T10:07:22.214Z","comments":true,"path":"2022/12/17/shell/docker/docker2_mysql_install/","link":"","permalink":"https://blog.zaiyuan.cc/2022/12/17/shell/docker/docker2_mysql_install/","excerpt":"","text":"mysql install创建文件 在要部署的地方, 创建 docker-compose.yaml 文件 创建 mysql 文件夹 编辑 docker-compose12345678910111213141516version: &#x27;3.7&#x27;services: mysql: image: mysql container_name: mysql restart: always ports: - 3306:3306 volumes: - ./mysql/data:/var/lib/mysql - ./mysql/my.cnf:/etc/mysql/my.cnf environment: MYSQL_ROOT_PASSWORD: 123456 TZ: Asia/Shanghai docker run1docker-compose up -d mysql other1docker run -d --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql 进入mysql1docker exec -it mysql sh update mysql passwrod type123456789101112131415# 进入 mysqlmysql -u root -p# input passwordalter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27; password expire never;# 修改localhost 的验证方式alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;123456&#x27;;# 修改外部访问的验证方式, 外部访问直接改这个就行alter user &#x27;root&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;123456&#x27;;# 查看select user,host,plugin,authentication_string from user;","categories":[{"name":"docker","slug":"docker","permalink":"https://blog.zaiyuan.cc/categories/docker/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://blog.zaiyuan.cc/tags/mysql/"},{"name":"sql","slug":"sql","permalink":"https://blog.zaiyuan.cc/tags/sql/"},{"name":"docker","slug":"docker","permalink":"https://blog.zaiyuan.cc/tags/docker/"}]},{"title":"dota 梦境伤害","slug":"dota/dota-mengjing","date":"2022-12-16T06:08:01.000Z","updated":"2023-03-20T10:05:36.485Z","comments":true,"path":"2022/12/16/dota/dota-mengjing/","link":"","permalink":"https://blog.zaiyuan.cc/2022/12/16/dota/dota-mengjing/","excerpt":"","text":"梦境伤害 date boss burt(e) remark 2022-12-16 14:11:38 魔像武者 33.7 2022-12-26 14:01:39 艾雪拉 32 2022-12-27 14:02:33 吸血鬼 37.1 2022-12-28 13:51:17 大地之斧 37.0 2023-01-01 21:58:30 魔像武者 37 2023-01-02 21:58:53 齐天大圣 39.4 2023-01-03 18:03:01 小娜迦 14.7 2023-01-04 18:03:05 生化狂魔 37.1 2023-01-05 09:10:08 深渊 30.1 2023-01-06 15:19:48 毒藤魔女 49.3 2023-01-09 09:32:34 肉山魔王 14.0 2023-01-10 09:33:10 大娜迦 30.2 2023-01-11 10:45:39 艾雪拉 46.3 2023-01-12 13:56:22 吸血鬼 46.4 2023-01-13 15:33:09 大地之斧 33.9 2023-01-14 15:32:05 恶魔天使 39.4 2023-01-15 15:32:27 无畏骑士 38.1 2023-01-16 15:33:52 圣灵守护 41.3 2023-01-17 15:16:29 魔像武者 45.7 2023-01-18 15:17:10 齐天大圣 38.2 2023-01-19 15:17:41 小娜迦 13.3 2023-01-20 15:22:52 2023-01-21 15:23:07 深渊魔王 31.6 2023-01-22 15:27:21 毒藤魔女 55.7 2023-01-23 15:27:51 地狱血魔 47.4 2023-01-24 15:28:41 肉山魔王 24.9 2023-01-25 15:29:04 毒狗 20.2 2023-01-26 15:30:00 美杜莎 45.3 2023-01-27 15:30:20 艾雪拉 43.7 2023-01-28 15:30:50 吸血鬼 48.0 巫医 2023-01-29 15:31:37 大地之斧 42.1 普通 2023-01-30 14:17:05 堕落天使 44.0 2023-01-31 14:17:49 无畏骑士 44.5 巫医, 繁星 2023-02-01 14:18:54 圣灵守护 49.2 巫医 2023-02-02 14:19:22 魔像武者 52.3 巫医 2023-02-03 14:19:56 齐天大圣 64.4 巫医 2023-02-04 21:51:46 小娜迦 24.09 巫医, 繁星 2023-02-05 21:53:01 生化狂魔 38.06 巫医 2023-02-06 21:53:52 深渊魔王 35.89 巫医 2023-02-07 09:14:05 毒藤魔女 73.8 巫医 2023-02-08 09:15:18 地狱血魔 49.7 巫医, 繁星 2023-02-09 09:16:02 肉山魔王 21.8 巫医, 繁星 2023-02-10 09:17:02 毒狗 22 2023-02-11 09:17:44 美杜莎 49.5 2023-02-12 09:18:22 艾雪拉 73.6 巫医 2023-02-28 09:17:20 艾雪拉 78.35 巫医 2023-03-01 09:20:27 吸血鬼 54.97 巫医 2023-03-02 10:00:43 大地之斧 70.37 巫医 2023-03-03 10:01:04 堕落天使 88.5 2023-03-04 10:01:27 无畏骑士 57.22 2023-03-05 09:59:59 圣灵守护 81.83 巫医 2023-03-06 09:59:26 魔像武者 77.24 巫医 2023-03-07 13:33:24 齐天大圣 58.77 2023-03-08 13:34:03 小娜迦 27.26 2023-03-09 13:35:35 生化狂魔 92.54 2023-03-10 18:00:22 深渊魔王 52.27 2023-03-11 18:00:36 毒藤魔女 97.93 2023-03-12 18:00:45 地狱血魔 65.45 2023-03-13 18:00:54 肉山魔王 35.58 2023-03-14 09:03:44 毒狗 27.48 2023-03-15 09:04:31 美杜莎 56.85 2023-03-16 09:06:53 艾雪拉 73.67 2023-03-17 09:04:06 吸血鬼 99.18 2023-03-18 18:02:10 大地之斧 70.56 2023-03-19 18:02:22 堕落天使 99.99 2023-03-20 18:02:31 无畏骑士 65.40 小娜迦 巫医，深海，炽翼，赏金，繁星 第一次巫医、炽翼不开大 第二次全开 第三次及以后星深海赏金一起开","categories":[],"tags":[{"name":"dota","slug":"dota","permalink":"https://blog.zaiyuan.cc/tags/dota/"}]},{"title":"git 命令小记","slug":"shell/git/git","date":"2022-12-02T10:02:50.000Z","updated":"2023-01-09T10:07:25.288Z","comments":true,"path":"2022/12/02/shell/git/git/","link":"","permalink":"https://blog.zaiyuan.cc/2022/12/02/shell/git/git/","excerpt":"","text":"配置 git config –global user.name “xxxxxx” 配置全局用户名 git config –global user.email “&#x78;&#120;&#120;&#x78;&#120;&#120;&#x40;&#120;&#x78;&#120;&#46;&#99;&#111;&#x6d;“ 配置全局用户邮箱 git config –global core.editor vim 配置git 提交信息的编辑器 以上命令省去 –global 可以对单独的项目进行配置 在git的全局配置（~&#x2F;.gitconfig）中可以对 一些命令起别名 在每个git管理的项目中可以假如 .gitignore 文件用来设置 可以被忽略的文件格式 基础命令 git status 查看文件状态 git add 把文件添加到git , 需要添加多个文件时，可以使用 add .或者 add * 来批量添加所有文件 git commit -m “备注信息” git commit -a -m &quot;备注信息&quot; 可以把 已经至少add过一次的所有文件（假如是新文件，就不会被提交）的修改提交 提交文件，并且加上提交时的备注信息，如果不加-m 会进入编辑器界面编辑备注信息 git log 查看历史提交记录 git tag -m”备注” &lt;commit值&gt; 给固定的记录打上标记 git cat-file -p &lt;commit值&gt; 查看指定commit中所包含的内容 tree 是指本次提交中的文件结构 parent 是本次commit的父节点 blob 是具体的文件的对象 撤销修改 git checkout 从历史区中捡出 file 把当前工作区中修改的内容覆盖掉 这样的操作比较危险，误操作时容易把工作区的改动全部删除 git stash 把当前工作区的中修改撤销 ，撤销的修改会以 栈 的形式存放 ，如果需要把撤销再复原的话，可以使用 git stash pop 把撤销拿回来; 如果需要彻底清空 stash里的内容可以 使用 git stash clear来清除垃圾区 git rm 可以把文件从历史区中删除，所以要想从git管理中删除某一个文件，必须使用 git rm，而不是直接使用rm git reset HEAD 可以把已经add到暂存区的修改再撤销回工作区vi 对比文件差异 git diff 分支操作 git branch 列出当前所有分支 1.1 git branch –all &#x2F;&#x2F; 所有的分支 git branch &lt;分支名&gt; 基于当前分支的最新提交拉取一次分支 git checkout &lt;分支名&gt; 切换到指定的分支上去 - 切换远程分支到本地 git checkout -b cad_team_a remotes/origin/cad_team_a git branch -d &lt;分支名&gt; 删除指定的分支 ，如果确定需要删除可以使用 -D 强制删除 git checkout -b &lt;分支名&gt; 会创建并且切换到该分支 git reset –hard &lt;commit值&gt; 可以回退本分支上的某一次 具体的提交 git merge &lt;分支名&gt; merge是把指定分支合并到当前的分支 git merge --no-merged 可以查看当前还有哪些分支与当前分支没有合并的 git merge --merge 可以查看已经与当前分支合并过的分支 git cherry-pick &lt;commit值&gt; 从别的分支上捡出一个commit与当前分支合并 git rebase 重衍（变基）命令 将某个分支的改动直接加入到某一指定分支上冲重新开展，效果是在最终的log里看不到有侧分支的痕迹 1 切换到需要 重衍的 分支 git checkout someBranch （需要重衍的分支） 2 执行重衍命令 git rebase baseBranch (重衍基于的分支) 3 切换到基于的分支合并重衍的分支 git checkout baseBranch &gt; git merge someBranch 远程操作 git clone 克隆远端仓库 基于ssh的远端地址 ssh://qingyun@192.168.1.233:/Users/qingyun/Desktop/code1512/Code/20160128/TestRemote 基于http/https的远端地址 http(https)://xxx.xxx.com/xxxx.git 加 -o 可以给远端仓库改名，默认是 origin git remote 列出远端仓库列表 git remote rename remoteName newName 给远端仓库改名 git remote show 列出远端仓库列表 git remote add &lt;仓库名&gt; &lt;远端地址&gt; 添加新的远端仓库 git remote rm &lt;仓库名&gt; 删除指定远端仓库 git fetch 拉取远端仓库内容 git fetch &lt;仓库名&gt; 拉取指定远端仓库的内容 fetch只是把远端仓库内容下载到本地，如果需要将内容与本地分支合并 需要 git merge &lt;仓库名&gt;/&lt;分支名&gt; git pull &lt;仓库名&gt; &lt;远端分支名&gt; 拉取远端分支并且跟本地分支合并 类似 fetch+merge 的组合 git push &lt;仓库名&gt; &lt;本地分支名&gt; 推送到服务器 git push &lt;仓库名&gt; :&lt;服务器分支名&gt; 删除服务器上的某一分支","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://blog.zaiyuan.cc/tags/git/"}]},{"title":"dotnet -- 2. set nuget","slug":"dotnet/dotnet2_setNuget","date":"2022-09-21T03:58:12.000Z","updated":"2023-04-19T09:03:52.726Z","comments":true,"path":"2022/09/21/dotnet/dotnet2_setNuget/","link":"","permalink":"https://blog.zaiyuan.cc/2022/09/21/dotnet/dotnet2_setNuget/","excerpt":"","text":"dotnet nuget add 1dotnet nuget add source &#123;url&#125; -n &#123;name&#125; remove 1dotnet nuget remove source &#123;name&#125; see 1dotnet nuget list source","categories":[{"name":"dotnet","slug":"dotnet","permalink":"https://blog.zaiyuan.cc/categories/dotnet/"}],"tags":[{"name":"dotnet","slug":"dotnet","permalink":"https://blog.zaiyuan.cc/tags/dotnet/"}]},{"title":"dotnet -- 1. publish","slug":"dotnet/dotnet1_publish","date":"2022-09-21T03:58:12.000Z","updated":"2023-04-19T09:02:57.601Z","comments":true,"path":"2022/09/21/dotnet/dotnet1_publish/","link":"","permalink":"https://blog.zaiyuan.cc/2022/09/21/dotnet/dotnet1_publish/","excerpt":"","text":"dotnet publish1dotnet publish -c Release -r linux-x64 --self-contained false -o ./bin/publish -c-c Release-c Debug","categories":[{"name":"dotnet","slug":"dotnet","permalink":"https://blog.zaiyuan.cc/categories/dotnet/"}],"tags":[{"name":"dotnet","slug":"dotnet","permalink":"https://blog.zaiyuan.cc/tags/dotnet/"}]},{"title":"dotnet -- 5. 中间件 Middleware","slug":"dotnet/dotnet5_middleware","date":"2022-09-21T03:58:12.000Z","updated":"2023-04-19T09:03:41.256Z","comments":true,"path":"2022/09/21/dotnet/dotnet5_middleware/","link":"","permalink":"https://blog.zaiyuan.cc/2022/09/21/dotnet/dotnet5_middleware/","excerpt":"","text":"概念地址: https://learn.microsoft.com/zh-cn/aspnet/core/fundamentals/middleware/?view=aspnetcore-7.0 常用中间件 异常&#x2F;错误处理 当应用在开发环境中运行时： 开发人员异常页中间件 (UseDeveloperExceptionPage) 报告应用运行时错误。 数据库错误页中间件 (UseDatabaseErrorPage) 报告数据库运行时错误。 当应用在生产环境中运行时： 异常处理程序中间件 (UseExceptionHandler) 捕获以下中间件中引发的异常。 HTTP 严格传输安全协议 (HSTS) 中间件 (UseHsts) 添加 Strict-Transport-Security 标头。 HTTPS 重定向中间件 (UseHttpsRedirection) 将 HTTP 请求重定向到 HTTPS。 静态文件中间件 (UseStaticFiles) 返回静态文件，并简化进一步请求处理。 Cookie 策略中间件 (UseCookiePolicy) 使应用符合欧盟一般数据保护条例 (GDPR) 规定。 用于路由请求的路由中间件 (UseRouting)。 身份验证中间件 (UseAuthentication) 尝试对用户进行身份验证，然后才会允许用户访问安全资源。 用于授权用户访问安全资源的授权中间件 (UseAuthorization)。 会话中间件 (UseSession) 建立和维护会话状态。 如果应用使用会话状态，请在 Cookie 策略中间件之后和 MVC 中间件之前调用会话中间件。 用于将 Razor Pages 终结点添加到请求管道的终结点路由中间件（带有 MapRazorPages 的 UseEndpoints）。123456789101112131415161718if (env.IsDevelopment())&#123; app.UseDeveloperExceptionPage(); app.UseDatabaseErrorPage();&#125;else&#123; app.UseExceptionHandler(&quot;/Error&quot;); app.UseHsts();&#125;app.UseHttpsRedirection();app.UseStaticFiles();app.UseCookiePolicy();app.UseRouting();app.UseAuthentication();app.UseAuthorization();app.UseSession();app.MapRazorPages();","categories":[{"name":"dotnet","slug":"dotnet","permalink":"https://blog.zaiyuan.cc/categories/dotnet/"}],"tags":[{"name":"dotnet","slug":"dotnet","permalink":"https://blog.zaiyuan.cc/tags/dotnet/"},{"name":".netcore","slug":"netcore","permalink":"https://blog.zaiyuan.cc/tags/netcore/"}]},{"title":"dotnet -- 4. set 跨域 Cors","slug":"dotnet/dotnet4_cors","date":"2022-09-21T03:58:12.000Z","updated":"2023-04-19T09:03:52.726Z","comments":true,"path":"2022/09/21/dotnet/dotnet4_cors/","link":"","permalink":"https://blog.zaiyuan.cc/2022/09/21/dotnet/dotnet4_cors/","excerpt":"","text":".netcore cors 配置跨域是后端职责所在 核心代码如下: 12345678910111213141516// 从 appsetting 获取跨域列表var hostList = configuration.GetSection(&quot;Cors&quot;).GetChildren().Select(w =&gt; w.Value).ToArray();services.AddCors(setupAction =&gt;&#123; // 配置跨域规则 setupAction.AddPolicy(&quot;cors&quot;, setupAction =&gt; &#123; //setupAction.AllowAnyOrigin(); setupAction.AllowAnyHeader(); setupAction.AllowAnyMethod(); setupAction.AllowCredentials().WithOrigins(hostList); &#125;);&#125;);// 使用跨域中间件app.UseCors(&quot;cors&quot;); 辅助代码 appsetting.json 123456789101112&#123; &quot;Logging&quot;: &#123; &quot;LogLevel&quot;: &#123; &quot;Default&quot;: &quot;Information&quot;, &quot;Microsoft.AspNetCore&quot;: &quot;Warning&quot; &#125; &#125;, &quot;Cors&quot;: [ &quot;http://localhost:5000&quot;, &quot;http://192.168.52.21:5000&quot; ]&#125; configuration, services, app 12345678910111213public class Program&#123; public static void Main(string[] args) &#123; var builder = WebApplication.CreateBuilder(args); var services = builder.Services; var configuration = builder.Configuration; var app = builder.Build(); app.Run(); &#125;&#125;","categories":[{"name":"dotnet","slug":"dotnet","permalink":"https://blog.zaiyuan.cc/categories/dotnet/"}],"tags":[{"name":"dotnet","slug":"dotnet","permalink":"https://blog.zaiyuan.cc/tags/dotnet/"},{"name":".netcore","slug":"netcore","permalink":"https://blog.zaiyuan.cc/tags/netcore/"}]},{"title":"linux 下 git 免密","slug":"shell/git/git_linuxAutoInputPwd","date":"2022-09-21T03:14:00.000Z","updated":"2023-01-09T10:07:25.290Z","comments":true,"path":"2022/09/21/shell/git/git_linuxAutoInputPwd/","link":"","permalink":"https://blog.zaiyuan.cc/2022/09/21/shell/git/git_linuxAutoInputPwd/","excerpt":"","text":"方法一 cd到~&#x2F;目录下，创建一个文件：touch .git-credentialsvim .git-credentials 然后输入https:&#x2F;&#x2F;{username}:{password}@git.gitxx.com，比如http://fengjiaheng:password@git.gitxx.com 然后执行：git config –global credential.helper store 然后使用git config –list或者查看一下~&#x2F;.gitconfig文件，会发现多了一行[credential] helper &#x3D; store 这时候再用 git 拉取仓库就不需要输入用户名和密码了。注意：第4步必须要做，否则做完4、5步之后也不能免密码拉取成功，需要再次执行第4步骤。 方法二 粗暴使用型Git Clone命令直接使用用户名密码Clone git clone http://userName:password@链接修改为 git clone https://username:password@链接 示例：git clone git@http://112.12.122.22:t-mapi/hotel-tapi.git修改为git clone ‘http://username:password@112.12.122.22:t-mapi/hotel-tapi.git’ 注意事项（2）如果账号username或者password中有@符号,需要 将@替换为%40（3）如果报错git clone event not found，需要将 git clone 后地址加上引号 ‘’","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://blog.zaiyuan.cc/tags/git/"},{"name":"linux","slug":"linux","permalink":"https://blog.zaiyuan.cc/tags/linux/"}]},{"title":"Create Hexo","slug":"shell/hexo/Create-Hexo","date":"2022-09-19T14:34:05.000Z","updated":"2023-01-09T10:07:25.291Z","comments":true,"path":"2022/09/19/shell/hexo/Create-Hexo/","link":"","permalink":"https://blog.zaiyuan.cc/2022/09/19/shell/hexo/Create-Hexo/","excerpt":"","text":"安装 安装前提: nodejs 安装 nodejs 直接下载安装: Nodejs 安装 hexo1npm install -g hexo-cli 初始化项目 找个文件夹1hexo init 使用 vexo theme theme 地址: Vexo Download&#x2F;Checkout this theme into your project 12345cd your-hexo-foldergit clone https://github.com/yanm1ng/hexo-theme-vexo.git themes/vexocp -R themes/vexo/_source/* source/ Update project _config.yml theme config, look like this 1themes: vexo Here theme’s name must same as the theme folder name. Modify theme themes/vexo/_config.yml with your own info. 创建新文章1hexo new &quot;title&quot; 发布 测试, 查看效果 hexo server 生成到 public 文件夹 hexo g copy public 里的内容到 github.io 项目, 并提交 最后, 提交本项目更改","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.zaiyuan.cc/tags/hexo/"}]},{"title":"Hello World","slug":"shell/hexo/hello-world","date":"2022-09-19T14:34:04.000Z","updated":"2023-01-09T10:07:25.293Z","comments":true,"path":"2022/09/19/shell/hexo/hello-world/","link":"","permalink":"https://blog.zaiyuan.cc/2022/09/19/shell/hexo/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.zaiyuan.cc/tags/hexo/"}]}],"categories":[{"name":"docker","slug":"docker","permalink":"https://blog.zaiyuan.cc/categories/docker/"},{"name":"vue","slug":"vue","permalink":"https://blog.zaiyuan.cc/categories/vue/"},{"name":"dotnet","slug":"dotnet","permalink":"https://blog.zaiyuan.cc/categories/dotnet/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://blog.zaiyuan.cc/tags/docker/"},{"name":"dockerfile","slug":"dockerfile","permalink":"https://blog.zaiyuan.cc/tags/dockerfile/"},{"name":"tools","slug":"tools","permalink":"https://blog.zaiyuan.cc/tags/tools/"},{"name":"vscode","slug":"vscode","permalink":"https://blog.zaiyuan.cc/tags/vscode/"},{"name":"vue","slug":"vue","permalink":"https://blog.zaiyuan.cc/tags/vue/"},{"name":"cors","slug":"cors","permalink":"https://blog.zaiyuan.cc/tags/cors/"},{"name":"windows","slug":"windows","permalink":"https://blog.zaiyuan.cc/tags/windows/"},{"name":"axios","slug":"axios","permalink":"https://blog.zaiyuan.cc/tags/axios/"},{"name":"dotnet","slug":"dotnet","permalink":"https://blog.zaiyuan.cc/tags/dotnet/"},{"name":"linux","slug":"linux","permalink":"https://blog.zaiyuan.cc/tags/linux/"},{"name":"sql","slug":"sql","permalink":"https://blog.zaiyuan.cc/tags/sql/"},{"name":"cursor","slug":"cursor","permalink":"https://blog.zaiyuan.cc/tags/cursor/"},{"name":"sass","slug":"sass","permalink":"https://blog.zaiyuan.cc/tags/sass/"},{"name":"element_ui","slug":"element-ui","permalink":"https://blog.zaiyuan.cc/tags/element-ui/"},{"name":"vue_cli","slug":"vue-cli","permalink":"https://blog.zaiyuan.cc/tags/vue-cli/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.zaiyuan.cc/tags/ubuntu/"},{"name":"mysql","slug":"mysql","permalink":"https://blog.zaiyuan.cc/tags/mysql/"},{"name":"dota","slug":"dota","permalink":"https://blog.zaiyuan.cc/tags/dota/"},{"name":"git","slug":"git","permalink":"https://blog.zaiyuan.cc/tags/git/"},{"name":".netcore","slug":"netcore","permalink":"https://blog.zaiyuan.cc/tags/netcore/"},{"name":"hexo","slug":"hexo","permalink":"https://blog.zaiyuan.cc/tags/hexo/"}]}